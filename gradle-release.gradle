@SuppressWarnings(["GroovyUnusedDeclaration", "GrMethodMayBeStatic"])
def isReleaseBuild() {
    return !VERSION_NAME.contains("SNAPSHOT")
}

@SuppressWarnings("GroovyUnusedDeclaration")
def getRepositoryUsername() {
    return project.hasProperty('NEXUS_USERNAME') ? project.property('NEXUS_USERNAME') : System.getenv('NEXUS_USERNAME')
}

@SuppressWarnings("GroovyUnusedDeclaration")
def getRepositoryPassword() {
    return project.hasProperty('NEXUS_PASSWORD') ? project.property('NEXUS_PASSWORD') : System.getenv('NEXUS_PASSWORD')
}

apply plugin: "com.jfrog.bintray"

afterEvaluate { project ->
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.dcendents.android-maven'

    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }

    task androidJavadocs(type: Javadoc) {
        failOnError = false
        source = android.sourceSets.main.java.source
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.source
    }

    bintray {
        dryRun = false
        publish = true
        override = true
        user = project.hasProperty('bintray.user') ? project.property('bintray.user') : System.getenv('BINTRAY_USER')
        key = project.hasProperty('bintray.apikey') ? project.property('bintray.apikey') : System.getenv('BINTRAY_API_KEY')
        def gpgkey = project.hasProperty('bintray.gpg.key') ? project.property('bintray.gpg.key') : System.getenv('BINTRAY_GPG_KEY')
        def gpgpass = project.hasProperty('bintray.gpg.password') ? project.property('bintray.gpg.password') : System.getenv('BINTRAY_GPG_PASS')
        def versionName = project.release.versionName

        publications('release')

        pkg {
            publish = true

            repo = "maven"
            name = GROUP + ":" + POM_ARTIFACT_ID //the name (= identifier) on bintray
            desc = POM_DESCRIPTION

            websiteUrl = POM_URL
            issueTrackerUrl = POM_SCM_URL_ISSUES
            vcsUrl = POM_SCM_URL

            githubRepo = POM_GITHUB_REPO
            githubReleaseNotesFile = POM_GITHUB_README

            publicDownloadNumbers = true
            licenses = ["Apache-2.0"]
            version {
                name = versionName
                vcsTag = versionName
                released = new Date()

                mavenCentralSync {
                    sync = true
                    user = getRepositoryUsername()
                    password = getRepositoryPassword()
                    close = '1'
                }
                gpg {
                    sign = true
                    passphrase = gpgpass
                }
            }
        }
    }

    ext.addDependency = { dependencyNode, group, name, version ->
        dependencyNode.appendNode('groupId', group)
        dependencyNode.appendNode('artifactId', name)
        dependencyNode.appendNode('version', version)
        dependencyNode.appendNode('scope', "compile")
    }

    def pomConfig = {
        licenses {
            license {
                name POM_LICENCE_NAME
                url POM_LICENCE_URL
                distribution POM_LICENCE_DIST
            }
        }
        developers {
            developer {
                id POM_DEVELOPER_ID
                name POM_DEVELOPER_NAME
                email 'mikepenz@gmail.com'
            }
        }
        scm {
            url POM_SCM_URL
            connection POM_SCM_CONNECTION
            developerConnection POM_SCM_DEV_CONNECTION
        }
    }

    publishing {
        publications {
            release(MavenPublication) {
                groupId GROUP
                artifactId POM_ARTIFACT_ID
                version project.release.versionName
                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
                artifact androidSourcesJar
                artifact androidJavadocsJar

                pom.withXml {
                    asNode().appendNode('name', POM_NAME);
                    asNode().appendNode('description', POM_DESCRIPTION);
                    asNode().appendNode('url', POM_SCM_URL);
                    def dependenciesNode = asNode().appendNode('dependencies');
                    configurations.implementation.allDependencies.each {
                        // Ensure dependencies such as fileTree are not included.
                        if (it.name != 'unspecified') {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            if (it.version != "unspecified") {
                                addDependency(dependencyNode, it.group, it.name, it.version)
                            } else {
                                addDependency(dependencyNode, it.getDependencyProject().findProperty("GROUP"), it.getDependencyProject().findProperty("POM_ARTIFACT_ID"), project.release.versionName)
                            }
                        }
                    }
                    asNode().children().last() + pomConfig
                }
            }
        }
    }
}